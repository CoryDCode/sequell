#! /usr/bin/env perl

use strict;
use warnings;

use lib 'lib';
use Henzell::Config qw/%CONFIG @LOGS @MILESTONES/;
use Henzell::Utils;

my $parallel_fetch_bin = "bin/parallelhttpfetch";
my $verbose = -t STDIN;
my $show_missing = grep(/^--show-missing$/, @ARGV);
my $list_files = grep(/^--list-files$/, @ARGV);

sub symlink_local_file($) {
  my $file = shift;
  my $local_source = $file->local_filepath();
  my $target_file = $file->target_filepath();
  print "Symlinking $local_source -> $target_file\n" if $verbose;
  symlink($local_source, $target_file) or die "Couldn't symlink $local_source -> $target_file\n";
}

sub fetch_file($) {
  my $file = shift;
  my $path = $file->target_filepath();
  my $target_exists = $file->target_exists();

  if ($show_missing || $list_files) {
    print "$path (" . $file->source_name() . ")\n" if !$target_exists || $list_files;
    return;
  }

  if ($target_exists && !$file->is_live()) {
    print "$path already exists and is not live, skipping it\n" if $verbose;
    return;
  }

  if (!$target_exists && $file->local_source_exists()) {
    symlink_local_file($file);
    return;
  }

  unless ($file->http_url()) {
    print "Skipping $file, no URL\n" if $verbose;
    return;
  }

  my $url = $file->http_url();
  print "Fetching $url -> $path\n" if $verbose;

  +{ url => $url, path => $path, target_exists => $target_exists }
}

sub curl_fetch {
  for my $file (@_) {
    my $url = $file->{url};
    my $path = $file->{path};
    my $limit_time = $file->{target_exists} ? '--max-time 15' : '';
    my $cmd = qq{curl -s $limit_time -C- $url -o $path >/dev/null 2>&1};
    print "[CMD] $cmd\n" if $verbose;
    system($cmd);
  }
}

sub parallel_fetch {
  my @files = @_;
  my @cmd = ($parallel_fetch_bin, "--user-agent='Sequell httpfetch/1.0'");
  push @cmd, "-q" unless $verbose;
  for my $file (@files) {
    push @cmd, "\Q$$file{url}>$$file{path}";
  }
  my $cmd = join(" ", @cmd);
  print "[CMD] $cmd\n" if $verbose;
  system($cmd);
}

sub main() {
  Henzell::Utils::lock_or_exit();
  Henzell::Config::read();

  my @fetch_list;
  for (@LOGS, @MILESTONES) {
    my $fetch_target = fetch_file($_);
    push @fetch_list, $fetch_target if $fetch_target;
  }

  if (@fetch_list) {
    if (-x $parallel_fetch_bin) {
      parallel_fetch(@fetch_list);
    } else {
      curl_fetch(@fetch_list);
    }
  }
}

main();
