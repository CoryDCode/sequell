#! /usr/bin/env perl
#
# Renames a source file from X to Y. Source and target files will be
# renamed in server-xlogs and in the Henzell DB.

use strict;
use warnings;

use DBI;

my $XLOG_ROOT = 'server-xlogs';
my $DBNAME = $ENV{HENZELL_DBNAME} || 'henzell';
my $DBUSER = 'henzell';
my $DBPASS = 'henzell';

sub resolve_file {
  my $file = shift;
  $file = "$XLOG_ROOT/$file" unless $file =~ m{/};
  $file
}

sub db_url {
  "dbi:Pg:dbname=" . $DBNAME
}

sub connect_db {
  my $dbh = DBI->connect(db_url(), $DBUSER, $DBPASS) or die "Could not connect to " . db_url() . ": $!\n";
  $dbh
}

sub basename {
  my $file = shift;
  my ($basename) = $file =~ m{.*/(.*)};
  $basename || $file
}

sub rename_db_file {
  my ($source, $target) = @_;
  $source = basename($source);
  $target = basename($target);
  my $dbh = connect_db();
  my $update_sql = 'UPDATE l_file SET file = ? WHERE file = ?';
  my @binds = ($target, $source);
  my $res = $dbh->do($update_sql, undef, @binds);
  if (!$res || $res <= 0) {
    die "Could not update l_file with $update_sql (" . join(", ", @binds) . "): $!\n";
  }
  print "Updated l_file from $source -> $target\n";
}

sub rename_fs_file {
  my ($source, $target) = @_;
  rename $source, $target or die "Could not rename $source -> $target: $!\n";
  print "Renamed $source -> $target\n";
}

sub main {
  my ($source, $target) = map(resolve_file($_), @ARGV);
  die "Source file $source does not exist\n" unless -f $source;

  rename_db_file($source, $target);
  rename_fs_file($source, $target)
}

main();
